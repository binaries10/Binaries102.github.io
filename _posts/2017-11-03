---
layout: post
title: 해킹 공격의 예술
---

해커는 기존의 전통적인 생각과 방법으로는 상상 할 수 없는 방법으로 문제를 해결 한다
해킹ㅂ 방법도 시스템의 규칙을 따른다.
해킹 프로그램의 최종 목표는 효율적이고 작은 소스코드로 보안을 깨는 것이다. 이런 코드를 우아한 코드라 부른다.
CPU가 어떻게 동작하는지 더 잘 이해하는 해커는 실행되는 프로그램을 잘 다룰 수 있다.
GNU  개발 툴 중 컴파일된 바이너리 파일을 살펴볼수 있는 objdump가 있다.
가장 왼쪽은 16진수로 이루어진 메모리 주소
기계어 명령의 비트는 어딘가에 있고, 어딘가가 메모리다. 메모리는 주소가 매겨진 임시 저장 공간의 바이트 모음일 뿐.
각기 주소를 갖고 있는 집들의 열처럼 메모리도 각기 메모리 주소를 가진 바이트들의 열로 생각할 수 있다.
컴파일된 프로그램의 기계어 명령을 찾으려면 CPU가 메모리에 접근한다.  
인텔 x86 프로세서는 32비트 주소 체계를 사용 2의 32승
     64 프로세서는 64비트 주소 체계를 사용 2의 64승
16진수 바이트 표기도 사용하기 불편하다 그래서 어셈블리가 나왔다 가장 우측이 어셈블리 언어
어셈블리 언어는 기계어 명령에 대응하는 연상 기호(Mnemonic)다. 
어셈블리 언어 명령과 기계어 명령은 직접적인 1:1관계가 있다.
1:1관계란 모든 프로세서 아키텍처는 각 기계어 명령을 가지므로 프로세서마다 각기 다른 형태의 어셈블리 언어가 있다는 의미.
어셈블리는 프로세서의 기계어 명령을 프로그래머에게 보여주는 유일한 방법
기계어 명령이 어떻게 표현되느냐는 관습과 선호도에 달렸다.
어셈블리 언어 표현에 상관없이 프로세서가 명령을 이해하는 것은 아주 간단하다. 명령은 연산과 연산의 목적지나 근원지를 표현하는 추가 인자로 구성된다.
연산은 메모리를 돌아다니며 간단한 수학 함수를 수샣ㅇ하거나 프로세서가 다른 일을 하게 인터럽트를 건다.
결국 컴퓨터 프로세서가 하는 일은 이것이 전부다. 
프로세서는 레지스터라는 자신만의 특별한 변수 세트를 갖고 있다. 대부분의 명령은 데이터를 읽거나 쓰기 위해 레지스터를 사용한다.
그래서 프로세서의 레지스터를 이해하는 것은 명령을 이해하는 데 중요하다.

프로세서용 내부 변수 같은 몇 개의 레지스터가 있다. 지금은 레지스터에 대해 추상적으로 얘기하고 넘어간다. 레지스터에 대해서는 스스로 알아 보자
프로그래머는 컴파일된 프로그램을 한 단계씩 보며 프로그램 메모리를 검사하고 프로세서 레지스터를 보기 위해 디버거를 사용한다.
(EAX,ECX,EDX,EBX)범용 레지스터다 각기 누산기, 카운터, 데이터, 베이스 레지스터라 부른다. CPU가 기계어를 실행할 때 임시 변수로 사용된다.
(ESP,EBP,ESI,EDI)범용 레지스터다 하지만 이 레지스터들은 가끔 포인터나 인덱스라고 부르기도 한다. 
각기 스택 포인트, 베이스 포인터, 근원지 인덱스,목적지 인덱스라 부른다. 이 레지스터들은 프로그램을 실행하고 메모리 관리를 하는데 쓰여 아주 중요하다.
-
---
